
/* Autogenerated. Do not edit. */

/// Routes for the team namespace
public class TeamRoutes {
    public let client: DropboxTransportClient
    init(client: DropboxTransportClient) {
        self.client = client
    }
    /**
        List all device sessions of a team's member.

        - parameter teamMemberId: The team's member id
        - parameter includeWebSessions: Whether to list web sessions of the team's member
        - parameter includeDesktopClients: Whether to list linked desktop devices of the team's member
        - parameter includeMobileClients: Whether to list linked mobile devices of the team's member

         - returns: Through the response callback, the caller will receive a `Team.ListMemberDevicesResult` object on
        success or a `Team.ListMemberDevicesError` object on failure.
    */
    public func devicesListMemberDevices(teamMemberId teamMemberId: String, includeWebSessions: Bool = true, includeDesktopClients: Bool = true, includeMobileClients: Bool = true) -> DropboxRpcRequest<Team.ListMemberDevicesResultSerializer, Team.ListMemberDevicesErrorSerializer> {
        let request = Team.ListMemberDevicesArg(teamMemberId: teamMemberId, includeWebSessions: includeWebSessions, includeDesktopClients: includeDesktopClients, includeMobileClients: includeMobileClients)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/devices/list_member_devices", params: Team.ListMemberDevicesArgSerializer().serialize(request), responseSerializer: Team.ListMemberDevicesResultSerializer(), errorSerializer: Team.ListMemberDevicesErrorSerializer())
    }
    /**
        List all device sessions of a team.

        - parameter cursor: At the first call to the devicesListTeamDevices the cursor shouldn't be passed. Then, if the
        result of the call includes a cursor, the following requests should include the received cursors in order to
        receive the next sub list of team devices
        - parameter includeWebSessions: Whether to list web sessions of the team members
        - parameter includeDesktopClients: Whether to list desktop clients of the team members
        - parameter includeMobileClients: Whether to list mobile clients of the team members

         - returns: Through the response callback, the caller will receive a `Team.ListTeamDevicesResult` object on
        success or a `Team.ListTeamDevicesError` object on failure.
    */
    public func devicesListTeamDevices(cursor: String? = nil, includeWebSessions: Bool = true, includeDesktopClients: Bool = true, includeMobileClients: Bool = true) -> DropboxRpcRequest<Team.ListTeamDevicesResultSerializer, Team.ListTeamDevicesErrorSerializer> {
        let request = Team.ListTeamDevicesArg(cursor: cursor, includeWebSessions: includeWebSessions, includeDesktopClients: includeDesktopClients, includeMobileClients: includeMobileClients)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/devices/list_team_devices", params: Team.ListTeamDevicesArgSerializer().serialize(request), responseSerializer: Team.ListTeamDevicesResultSerializer(), errorSerializer: Team.ListTeamDevicesErrorSerializer())
    }
    /**
        Revoke a device session of a team's member


         - returns: Through the response callback, the caller will receive a `Void` object on success or a
        `Team.RevokeDeviceSessionError` object on failure.
    */
    public func devicesRevokeDeviceSession(request request: Team.RevokeDeviceSessionArg) -> DropboxRpcRequest<VoidSerializer, Team.RevokeDeviceSessionErrorSerializer> {
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/devices/revoke_device_session", params: Team.RevokeDeviceSessionArgSerializer().serialize(request), responseSerializer: Serialization._VoidSerializer, errorSerializer: Team.RevokeDeviceSessionErrorSerializer())
    }
    /**
        Revoke a list of device sessions of team members


         - returns: Through the response callback, the caller will receive a `Team.RevokeDeviceSessionBatchResult`
        object on success or a `Team.RevokeDeviceSessionBatchError` object on failure.
    */
    public func devicesRevokeDeviceSessionBatch(revokeDevices revokeDevices: Array<Team.RevokeDeviceSessionArg>) -> DropboxRpcRequest<Team.RevokeDeviceSessionBatchResultSerializer, Team.RevokeDeviceSessionBatchErrorSerializer> {
        let request = Team.RevokeDeviceSessionBatchArg(revokeDevices: revokeDevices)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/devices/revoke_device_session_batch", params: Team.RevokeDeviceSessionBatchArgSerializer().serialize(request), responseSerializer: Team.RevokeDeviceSessionBatchResultSerializer(), errorSerializer: Team.RevokeDeviceSessionBatchErrorSerializer())
    }
    /**
        Retrieves information about a team.


         - returns: Through the response callback, the caller will receive a `Team.TeamGetInfoResult` object on success
        or a `Void` object on failure.
    */
    public func getInfo() -> DropboxRpcRequest<Team.TeamGetInfoResultSerializer, VoidSerializer> {
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/get_info", params: Serialization._VoidSerializer.serialize(), responseSerializer: Team.TeamGetInfoResultSerializer(), errorSerializer: Serialization._VoidSerializer)
    }
    /**
        Creates a new, empty group, with a requested name. Permission : Team member management

        - parameter groupName: Group name.
        - parameter groupExternalId: Optional argument. The creator of a team can associate an arbitrary external ID to
        the group.

         - returns: Through the response callback, the caller will receive a `Team.GroupFullInfo` object on success or a
        `Team.GroupCreateError` object on failure.
    */
    public func groupsCreate(groupName groupName: String, groupExternalId: String? = nil) -> DropboxRpcRequest<Team.GroupFullInfoSerializer, Team.GroupCreateErrorSerializer> {
        let request = Team.GroupCreateArg(groupName: groupName, groupExternalId: groupExternalId)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/groups/create", params: Team.GroupCreateArgSerializer().serialize(request), responseSerializer: Team.GroupFullInfoSerializer(), errorSerializer: Team.GroupCreateErrorSerializer())
    }
    /**
        Deletes a group. The group is deleted immediately. However the revoking of group-owned resources may take
        additional time. Use the groupsJobStatusGet to determine whether this process has completed. Permission : Team
        member management


         - returns: Through the response callback, the caller will receive a `Async.LaunchEmptyResult` object on success
        or a `Team.GroupDeleteError` object on failure.
    */
    public func groupsDelete(request request: Team.GroupSelector) -> DropboxRpcRequest<Async.LaunchEmptyResultSerializer, Team.GroupDeleteErrorSerializer> {
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/groups/delete", params: Team.GroupSelectorSerializer().serialize(request), responseSerializer: Async.LaunchEmptyResultSerializer(), errorSerializer: Team.GroupDeleteErrorSerializer())
    }
    /**
        Retrieves information about one or more groups. Permission : Team Information


         - returns: Through the response callback, the caller will receive a `Array<Team.GroupsGetInfoItem>` object on
        success or a `Team.GroupsGetInfoError` object on failure.
    */
    public func groupsGetInfo(request request: Team.GroupsSelector) -> DropboxRpcRequest<ArraySerializer<Team.GroupsGetInfoItemSerializer>, Team.GroupsGetInfoErrorSerializer> {
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/groups/get_info", params: Team.GroupsSelectorSerializer().serialize(request), responseSerializer: ArraySerializer(Team.GroupsGetInfoItemSerializer()), errorSerializer: Team.GroupsGetInfoErrorSerializer())
    }
    /**
        Once an async_job_id is returned from groupsDelete, groupsMembersAdd , or groupsMembersRemove use this method to
        poll the status of granting/revoking group members' access to group-owned resources. Permission : Team member
        management

        - parameter asyncJobId: Id of the asynchronous job. This is the value of a response returned from the method
        that launched the job.

         - returns: Through the response callback, the caller will receive a `Async.PollEmptyResult` object on success
        or a `Team.GroupsPollError` object on failure.
    */
    public func groupsJobStatusGet(asyncJobId asyncJobId: String) -> DropboxRpcRequest<Async.PollEmptyResultSerializer, Team.GroupsPollErrorSerializer> {
        let request = Async.PollArg(asyncJobId: asyncJobId)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/groups/job_status/get", params: Async.PollArgSerializer().serialize(request), responseSerializer: Async.PollEmptyResultSerializer(), errorSerializer: Team.GroupsPollErrorSerializer())
    }
    /**
        Lists groups on a team. Permission : Team Information

        - parameter limit: Number of results to return per call.

         - returns: Through the response callback, the caller will receive a `Team.GroupsListResult` object on success
        or a `Void` object on failure.
    */
    public func groupsList(limit: UInt32 = 1000) -> DropboxRpcRequest<Team.GroupsListResultSerializer, VoidSerializer> {
        let request = Team.GroupsListArg(limit: limit)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/groups/list", params: Team.GroupsListArgSerializer().serialize(request), responseSerializer: Team.GroupsListResultSerializer(), errorSerializer: Serialization._VoidSerializer)
    }
    /**
        Once a cursor has been retrieved from groupsList, use this to paginate through all groups. Permission : Team
        information

        - parameter cursor: Indicates from what point to get the next set of groups.

         - returns: Through the response callback, the caller will receive a `Team.GroupsListResult` object on success
        or a `Team.GroupsListContinueError` object on failure.
    */
    public func groupsListContinue(cursor cursor: String) -> DropboxRpcRequest<Team.GroupsListResultSerializer, Team.GroupsListContinueErrorSerializer> {
        let request = Team.GroupsListContinueArg(cursor: cursor)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/groups/list/continue", params: Team.GroupsListContinueArgSerializer().serialize(request), responseSerializer: Team.GroupsListResultSerializer(), errorSerializer: Team.GroupsListContinueErrorSerializer())
    }
    /**
        Adds members to a group. The members are added immediately. However the granting of group-owned resources may
        take additional time. Use the groupsJobStatusGet to determine whether this process has completed. Permission :
        Team member management

        - parameter group: Group to which users will be added.
        - parameter members: List of users to be added to the group.

         - returns: Through the response callback, the caller will receive a `Team.GroupMembersChangeResult` object on
        success or a `Team.GroupMembersAddError` object on failure.
    */
    public func groupsMembersAdd(group group: Team.GroupSelector, members: Array<Team.MemberAccess>) -> DropboxRpcRequest<Team.GroupMembersChangeResultSerializer, Team.GroupMembersAddErrorSerializer> {
        let request = Team.GroupMembersAddArg(group: group, members: members)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/groups/members/add", params: Team.GroupMembersAddArgSerializer().serialize(request), responseSerializer: Team.GroupMembersChangeResultSerializer(), errorSerializer: Team.GroupMembersAddErrorSerializer())
    }
    /**
        Removes members from a group. The members are removed immediately. However the revoking of group-owned resources
        may take additional time. Use the groupsJobStatusGet to determine whether this process has completed. Permission
        : Team member management


         - returns: Through the response callback, the caller will receive a `Team.GroupMembersChangeResult` object on
        success or a `Team.GroupMembersRemoveError` object on failure.
    */
    public func groupsMembersRemove(group group: Team.GroupSelector, users: Array<Team.UserSelectorArg>) -> DropboxRpcRequest<Team.GroupMembersChangeResultSerializer, Team.GroupMembersRemoveErrorSerializer> {
        let request = Team.GroupMembersRemoveArg(group: group, users: users)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/groups/members/remove", params: Team.GroupMembersRemoveArgSerializer().serialize(request), responseSerializer: Team.GroupMembersChangeResultSerializer(), errorSerializer: Team.GroupMembersRemoveErrorSerializer())
    }
    /**
        Sets a member's access type in a group. Permission : Team member management

        - parameter accessType: New group access type the user will have.

         - returns: Through the response callback, the caller will receive a `Array<Team.GroupsGetInfoItem>` object on
        success or a `Team.GroupMemberSelectorError` object on failure.
    */
    public func groupsMembersSetAccessType(group group: Team.GroupSelector, user: Team.UserSelectorArg, accessType: Team.GroupAccessType) -> DropboxRpcRequest<ArraySerializer<Team.GroupsGetInfoItemSerializer>, Team.GroupMemberSelectorErrorSerializer> {
        let request = Team.GroupMembersSetAccessTypeArg(group: group, user: user, accessType: accessType)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/groups/members/set_access_type", params: Team.GroupMembersSetAccessTypeArgSerializer().serialize(request), responseSerializer: ArraySerializer(Team.GroupsGetInfoItemSerializer()), errorSerializer: Team.GroupMemberSelectorErrorSerializer())
    }
    /**
        Updates a group's name and/or external ID. Permission : Team member management

        - parameter group: Specify a group.
        - parameter newGroupName: Optional argument. Set group name to this if provided.
        - parameter newGroupExternalId: Optional argument. New group external ID. If the argument is None, the group's
        external_id won't be updated. If the argument is empty string, the group's external id will be cleared.

         - returns: Through the response callback, the caller will receive a `Team.GroupFullInfo` object on success or a
        `Team.GroupUpdateError` object on failure.
    */
    public func groupsUpdate(group group: Team.GroupSelector, newGroupName: String? = nil, newGroupExternalId: String? = nil) -> DropboxRpcRequest<Team.GroupFullInfoSerializer, Team.GroupUpdateErrorSerializer> {
        let request = Team.GroupUpdateArgs(group: group, newGroupName: newGroupName, newGroupExternalId: newGroupExternalId)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/groups/update", params: Team.GroupUpdateArgsSerializer().serialize(request), responseSerializer: Team.GroupFullInfoSerializer(), errorSerializer: Team.GroupUpdateErrorSerializer())
    }
    /**
        List all linked applications of the team member. Note, this endpoint doesn't list any team-linked applications.

        - parameter teamMemberId: The team member id

         - returns: Through the response callback, the caller will receive a `Team.ListMemberAppsResult` object on
        success or a `Team.ListMemberAppsError` object on failure.
    */
    public func linkedAppsListMemberLinkedApps(teamMemberId teamMemberId: String) -> DropboxRpcRequest<Team.ListMemberAppsResultSerializer, Team.ListMemberAppsErrorSerializer> {
        let request = Team.ListMemberAppsArg(teamMemberId: teamMemberId)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/linked_apps/list_member_linked_apps", params: Team.ListMemberAppsArgSerializer().serialize(request), responseSerializer: Team.ListMemberAppsResultSerializer(), errorSerializer: Team.ListMemberAppsErrorSerializer())
    }
    /**
        List all applications linked to the team members' accounts. Note, this endpoint doesn't list any team-linked
        applications.

        - parameter cursor: At the first call to the linkedAppsListTeamLinkedApps the cursor shouldn't be passed. Then,
        if the result of the call includes a cursor, the following requests should include the received cursors in order
        to receive the next sub list of the team applications

         - returns: Through the response callback, the caller will receive a `Team.ListTeamAppsResult` object on success
        or a `Team.ListTeamAppsError` object on failure.
    */
    public func linkedAppsListTeamLinkedApps(cursor: String? = nil) -> DropboxRpcRequest<Team.ListTeamAppsResultSerializer, Team.ListTeamAppsErrorSerializer> {
        let request = Team.ListTeamAppsArg(cursor: cursor)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/linked_apps/list_team_linked_apps", params: Team.ListTeamAppsArgSerializer().serialize(request), responseSerializer: Team.ListTeamAppsResultSerializer(), errorSerializer: Team.ListTeamAppsErrorSerializer())
    }
    /**
        Revoke a linked application of the team member

        - parameter appId: The application's unique id
        - parameter teamMemberId: The unique id of the member owning the device
        - parameter keepAppFolder: Whether to keep the application dedicated folder (in case the application uses  one)

         - returns: Through the response callback, the caller will receive a `Void` object on success or a
        `Team.RevokeLinkedAppError` object on failure.
    */
    public func linkedAppsRevokeLinkedApp(appId appId: String, teamMemberId: String, keepAppFolder: Bool = true) -> DropboxRpcRequest<VoidSerializer, Team.RevokeLinkedAppErrorSerializer> {
        let request = Team.RevokeLinkedApiAppArg(appId: appId, teamMemberId: teamMemberId, keepAppFolder: keepAppFolder)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/linked_apps/revoke_linked_app", params: Team.RevokeLinkedApiAppArgSerializer().serialize(request), responseSerializer: Serialization._VoidSerializer, errorSerializer: Team.RevokeLinkedAppErrorSerializer())
    }
    /**
        Revoke a list of linked applications of the team members


         - returns: Through the response callback, the caller will receive a `Team.RevokeLinkedAppBatchResult` object on
        success or a `Team.RevokeLinkedAppBatchError` object on failure.
    */
    public func linkedAppsRevokeLinkedAppBatch(revokeLinkedApp revokeLinkedApp: Array<Team.RevokeLinkedApiAppArg>) -> DropboxRpcRequest<Team.RevokeLinkedAppBatchResultSerializer, Team.RevokeLinkedAppBatchErrorSerializer> {
        let request = Team.RevokeLinkedApiAppBatchArg(revokeLinkedApp: revokeLinkedApp)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/linked_apps/revoke_linked_app_batch", params: Team.RevokeLinkedApiAppBatchArgSerializer().serialize(request), responseSerializer: Team.RevokeLinkedAppBatchResultSerializer(), errorSerializer: Team.RevokeLinkedAppBatchErrorSerializer())
    }
    /**
        Adds members to a team. Permission : Team member management A maximum of 20 members can be specified in a single
        call. If no Dropbox account exists with the email address specified, a new Dropbox account will be created with
        the given email address, and that account will be invited to the team. If a personal Dropbox account exists with
        the email address specified in the call, this call will create a placeholder Dropbox account for the user on the
        team and send an email inviting the user to migrate their existing personal account onto the team. Team member
        management apps are required to set an initial given_name and surname for a user to use in the team invitation
        and for 'Perform as team member' actions taken on the user before they become 'active'.

        - parameter newMembers: Details of new members to be added to the team.
        - parameter forceAsync: Whether to force the add to happen asynchronously.

         - returns: Through the response callback, the caller will receive a `Team.MembersAddLaunch` object on success
        or a `Void` object on failure.
    */
    public func membersAdd(newMembers newMembers: Array<Team.MemberAddArg>, forceAsync: Bool = false) -> DropboxRpcRequest<Team.MembersAddLaunchSerializer, VoidSerializer> {
        let request = Team.MembersAddArg(newMembers: newMembers, forceAsync: forceAsync)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/members/add", params: Team.MembersAddArgSerializer().serialize(request), responseSerializer: Team.MembersAddLaunchSerializer(), errorSerializer: Serialization._VoidSerializer)
    }
    /**
        Once an async_job_id is returned from membersAdd , use this to poll the status of the asynchronous request.
        Permission : Team member management

        - parameter asyncJobId: Id of the asynchronous job. This is the value of a response returned from the method
        that launched the job.

         - returns: Through the response callback, the caller will receive a `Team.MembersAddJobStatus` object on
        success or a `Async.PollError` object on failure.
    */
    public func membersAddJobStatusGet(asyncJobId asyncJobId: String) -> DropboxRpcRequest<Team.MembersAddJobStatusSerializer, Async.PollErrorSerializer> {
        let request = Async.PollArg(asyncJobId: asyncJobId)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/members/add/job_status/get", params: Async.PollArgSerializer().serialize(request), responseSerializer: Team.MembersAddJobStatusSerializer(), errorSerializer: Async.PollErrorSerializer())
    }
    /**
        Returns information about multiple team members. Permission : Team information This endpoint will return an
        empty member_info item, for IDs (or emails) that cannot be matched to a valid team member.

        - parameter members: List of team members.

         - returns: Through the response callback, the caller will receive a `Array<Team.MembersGetInfoItem>` object on
        success or a `Team.MembersGetInfoError` object on failure.
    */
    public func membersGetInfo(members members: Array<Team.UserSelectorArg>) -> DropboxRpcRequest<ArraySerializer<Team.MembersGetInfoItemSerializer>, Team.MembersGetInfoErrorSerializer> {
        let request = Team.MembersGetInfoArgs(members: members)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/members/get_info", params: Team.MembersGetInfoArgsSerializer().serialize(request), responseSerializer: ArraySerializer(Team.MembersGetInfoItemSerializer()), errorSerializer: Team.MembersGetInfoErrorSerializer())
    }
    /**
        Lists members of a team. Permission : Team information

        - parameter limit: Number of results to return per call.

         - returns: Through the response callback, the caller will receive a `Team.MembersListResult` object on success
        or a `Team.MembersListError` object on failure.
    */
    public func membersList(limit: UInt32 = 1000) -> DropboxRpcRequest<Team.MembersListResultSerializer, Team.MembersListErrorSerializer> {
        let request = Team.MembersListArg(limit: limit)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/members/list", params: Team.MembersListArgSerializer().serialize(request), responseSerializer: Team.MembersListResultSerializer(), errorSerializer: Team.MembersListErrorSerializer())
    }
    /**
        Once a cursor has been retrieved from membersList, use this to paginate through all team members. Permission :
        Team information

        - parameter cursor: Indicates from what point to get the next set of members.

         - returns: Through the response callback, the caller will receive a `Team.MembersListResult` object on success
        or a `Team.MembersListContinueError` object on failure.
    */
    public func membersListContinue(cursor cursor: String) -> DropboxRpcRequest<Team.MembersListResultSerializer, Team.MembersListContinueErrorSerializer> {
        let request = Team.MembersListContinueArg(cursor: cursor)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/members/list/continue", params: Team.MembersListContinueArgSerializer().serialize(request), responseSerializer: Team.MembersListResultSerializer(), errorSerializer: Team.MembersListContinueErrorSerializer())
    }
    /**
        Removes a member from a team. Permission : Team member management Exactly one of team_member_id, email, or
        external_id must be provided to identify the user account. This is not a deactivation where the account can be
        re-activated again. Calling membersAdd with the removed user's email address will create a new account with a
        new team_member_id that will not have access to any content that was shared with the initial account. This
        endpoint may initiate an asynchronous job. To obtain the final result of the job, the client should periodically
        poll membersRemoveJobStatusGet.

        - parameter transferDestId: If provided, files from the deleted member account will be transferred to this user.
        - parameter transferAdminId: If provided, errors during the transfer process will be sent via email to this
        user. If the transfer_dest_id argument was provided, then this argument must be provided as well.

         - returns: Through the response callback, the caller will receive a `Async.LaunchEmptyResult` object on success
        or a `Team.MembersRemoveError` object on failure.
    */
    public func membersRemove(user user: Team.UserSelectorArg, wipeData: Bool = true, transferDestId: Team.UserSelectorArg? = nil, transferAdminId: Team.UserSelectorArg? = nil) -> DropboxRpcRequest<Async.LaunchEmptyResultSerializer, Team.MembersRemoveErrorSerializer> {
        let request = Team.MembersRemoveArg(user: user, wipeData: wipeData, transferDestId: transferDestId, transferAdminId: transferAdminId)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/members/remove", params: Team.MembersRemoveArgSerializer().serialize(request), responseSerializer: Async.LaunchEmptyResultSerializer(), errorSerializer: Team.MembersRemoveErrorSerializer())
    }
    /**
        Once an async_job_id is returned from membersRemove , use this to poll the status of the asynchronous request.
        Permission : Team member management

        - parameter asyncJobId: Id of the asynchronous job. This is the value of a response returned from the method
        that launched the job.

         - returns: Through the response callback, the caller will receive a `Async.PollEmptyResult` object on success
        or a `Async.PollError` object on failure.
    */
    public func membersRemoveJobStatusGet(asyncJobId asyncJobId: String) -> DropboxRpcRequest<Async.PollEmptyResultSerializer, Async.PollErrorSerializer> {
        let request = Async.PollArg(asyncJobId: asyncJobId)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/members/remove/job_status/get", params: Async.PollArgSerializer().serialize(request), responseSerializer: Async.PollEmptyResultSerializer(), errorSerializer: Async.PollErrorSerializer())
    }
    /**
        Sends welcome email to pending team member. Permission : Team member management Exactly one of team_member_id,
        email, or external_id must be provided to identify the user account. No-op if team member is not pending.


         - returns: Through the response callback, the caller will receive a `Void` object on success or a
        `Team.MembersSendWelcomeError` object on failure.
    */
    public func membersSendWelcomeEmail(request request: Team.UserSelectorArg) -> DropboxRpcRequest<VoidSerializer, Team.MembersSendWelcomeErrorSerializer> {
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/members/send_welcome_email", params: Team.UserSelectorArgSerializer().serialize(request), responseSerializer: Serialization._VoidSerializer, errorSerializer: Team.MembersSendWelcomeErrorSerializer())
    }
    /**
        Updates a team member's permissions. Permission : Team member management

        - parameter user: Identity of user whose role will be set.
        - parameter newRole: The new role of the member.

         - returns: Through the response callback, the caller will receive a `Team.MembersSetPermissionsResult` object
        on success or a `Team.MembersSetPermissionsError` object on failure.
    */
    public func membersSetAdminPermissions(user user: Team.UserSelectorArg, newRole: Team.AdminTier) -> DropboxRpcRequest<Team.MembersSetPermissionsResultSerializer, Team.MembersSetPermissionsErrorSerializer> {
        let request = Team.MembersSetPermissionsArg(user: user, newRole: newRole)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/members/set_admin_permissions", params: Team.MembersSetPermissionsArgSerializer().serialize(request), responseSerializer: Team.MembersSetPermissionsResultSerializer(), errorSerializer: Team.MembersSetPermissionsErrorSerializer())
    }
    /**
        Updates a team member's profile. Permission : Team member management

        - parameter user: Identity of user whose profile will be set.
        - parameter newEmail: New email for member.
        - parameter newExternalId: New external ID for member.
        - parameter newGivenName: New given name for member.
        - parameter newSurname: New surname for member.

         - returns: Through the response callback, the caller will receive a `Team.TeamMemberInfo` object on success or
        a `Team.MembersSetProfileError` object on failure.
    */
    public func membersSetProfile(user user: Team.UserSelectorArg, newEmail: String? = nil, newExternalId: String? = nil, newGivenName: String? = nil, newSurname: String? = nil) -> DropboxRpcRequest<Team.TeamMemberInfoSerializer, Team.MembersSetProfileErrorSerializer> {
        let request = Team.MembersSetProfileArg(user: user, newEmail: newEmail, newExternalId: newExternalId, newGivenName: newGivenName, newSurname: newSurname)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/members/set_profile", params: Team.MembersSetProfileArgSerializer().serialize(request), responseSerializer: Team.TeamMemberInfoSerializer(), errorSerializer: Team.MembersSetProfileErrorSerializer())
    }
    /**
        Suspend a member from a team. Permission : Team member management Exactly one of team_member_id, email, or
        external_id must be provided to identify the user account.

        - parameter user: Identity of user to remove/suspend.
        - parameter wipeData: If provided, controls if the user's data will be deleted on their linked devices.

         - returns: Through the response callback, the caller will receive a `Void` object on success or a
        `Team.MembersSuspendError` object on failure.
    */
    public func membersSuspend(user user: Team.UserSelectorArg, wipeData: Bool = true) -> DropboxRpcRequest<VoidSerializer, Team.MembersSuspendErrorSerializer> {
        let request = Team.MembersDeactivateArg(user: user, wipeData: wipeData)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/members/suspend", params: Team.MembersDeactivateArgSerializer().serialize(request), responseSerializer: Serialization._VoidSerializer, errorSerializer: Team.MembersSuspendErrorSerializer())
    }
    /**
        Unsuspend a member from a team. Permission : Team member management Exactly one of team_member_id, email, or
        external_id must be provided to identify the user account.

        - parameter user: Identity of user to unsuspend.

         - returns: Through the response callback, the caller will receive a `Void` object on success or a
        `Team.MembersUnsuspendError` object on failure.
    */
    public func membersUnsuspend(user user: Team.UserSelectorArg) -> DropboxRpcRequest<VoidSerializer, Team.MembersUnsuspendErrorSerializer> {
        let request = Team.MembersUnsuspendArg(user: user)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/members/unsuspend", params: Team.MembersUnsuspendArgSerializer().serialize(request), responseSerializer: Serialization._VoidSerializer, errorSerializer: Team.MembersUnsuspendErrorSerializer())
    }
    /**
        Retrieves reporting data about a team's user activity.

        - parameter startDate: Optional starting date (inclusive)
        - parameter endDate: Optional ending date (exclusive)

         - returns: Through the response callback, the caller will receive a `Team.GetActivityReport` object on success
        or a `Team.DateRangeError` object on failure.
    */
    public func reportsGetActivity(startDate: NSDate? = nil, endDate: NSDate? = nil) -> DropboxRpcRequest<Team.GetActivityReportSerializer, Team.DateRangeErrorSerializer> {
        let request = Team.DateRange(startDate: startDate, endDate: endDate)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/reports/get_activity", params: Team.DateRangeSerializer().serialize(request), responseSerializer: Team.GetActivityReportSerializer(), errorSerializer: Team.DateRangeErrorSerializer())
    }
    /**
        Retrieves reporting data about a team's linked devices.

        - parameter startDate: Optional starting date (inclusive)
        - parameter endDate: Optional ending date (exclusive)

         - returns: Through the response callback, the caller will receive a `Team.GetDevicesReport` object on success
        or a `Team.DateRangeError` object on failure.
    */
    public func reportsGetDevices(startDate: NSDate? = nil, endDate: NSDate? = nil) -> DropboxRpcRequest<Team.GetDevicesReportSerializer, Team.DateRangeErrorSerializer> {
        let request = Team.DateRange(startDate: startDate, endDate: endDate)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/reports/get_devices", params: Team.DateRangeSerializer().serialize(request), responseSerializer: Team.GetDevicesReportSerializer(), errorSerializer: Team.DateRangeErrorSerializer())
    }
    /**
        Retrieves reporting data about a team's membership.

        - parameter startDate: Optional starting date (inclusive)
        - parameter endDate: Optional ending date (exclusive)

         - returns: Through the response callback, the caller will receive a `Team.GetMembershipReport` object on
        success or a `Team.DateRangeError` object on failure.
    */
    public func reportsGetMembership(startDate: NSDate? = nil, endDate: NSDate? = nil) -> DropboxRpcRequest<Team.GetMembershipReportSerializer, Team.DateRangeErrorSerializer> {
        let request = Team.DateRange(startDate: startDate, endDate: endDate)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/reports/get_membership", params: Team.DateRangeSerializer().serialize(request), responseSerializer: Team.GetMembershipReportSerializer(), errorSerializer: Team.DateRangeErrorSerializer())
    }
    /**
        Retrieves reporting data about a team's storage usage.

        - parameter startDate: Optional starting date (inclusive)
        - parameter endDate: Optional ending date (exclusive)

         - returns: Through the response callback, the caller will receive a `Team.GetStorageReport` object on success
        or a `Team.DateRangeError` object on failure.
    */
    public func reportsGetStorage(startDate: NSDate? = nil, endDate: NSDate? = nil) -> DropboxRpcRequest<Team.GetStorageReportSerializer, Team.DateRangeErrorSerializer> {
        let request = Team.DateRange(startDate: startDate, endDate: endDate)
        return DropboxRpcRequest(client: self.client, host: "meta", route: "/team/reports/get_storage", params: Team.DateRangeSerializer().serialize(request), responseSerializer: Team.GetStorageReportSerializer(), errorSerializer: Team.DateRangeErrorSerializer())
    }
}
